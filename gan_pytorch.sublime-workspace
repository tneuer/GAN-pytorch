{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"X_",
				"X_train\tstatement"
			],
			[
				"plot",
				"plot_images\tfunction"
			],
			[
				"iter",
				"iterative_net"
			],
			[
				"inp",
				"input_size\tstatement"
			],
			[
				"_val",
				"_validate_object_input"
			],
			[
				"input",
				"input_type\tstatement"
			],
			[
				"logg",
				"logged_losses\tstatement"
			],
			[
				"sa",
				"savefig\tfunction"
			],
			[
				"plt",
				"plot_losses\tfunction"
			],
			[
				"lo",
				"losses\tparam"
			],
			[
				"loss",
				"loss_type\tstatement"
			],
			[
				"plot_l",
				"plot_image_samples\tfunction"
			],
			[
				"plot_",
				"plot_losses\tfunction"
			],
			[
				"pl",
				"plot_losses\tfunction"
			],
			[
				"Para",
				"parallel\tmodule"
			],
			[
				"Cond",
				"ConditionalWassersteinGAN\tclass"
			],
			[
				"log",
				"log_kwargs\tstatement"
			],
			[
				"save_",
				"save_images_every\tstatement"
			],
			[
				"save",
				"save_model_every\tstatement"
			],
			[
				"log_",
				"log_kwargs"
			],
			[
				"adv",
				"adv_steps\tparam"
			],
			[
				"sav",
				"save_images_every"
			],
			[
				"test",
				"test_x_batch\tstatement"
			],
			[
				"test_",
				"test_batch\tstatement"
			],
			[
				"max",
				"max_epochs\tparam"
			],
			[
				"Gene",
				"GenerativeModel\tclass"
			],
			[
				"wh",
				"who\tparam"
			],
			[
				"X",
				"X_batch\tstatement"
			],
			[
				"con",
				"concatenate"
			],
			[
				"__",
				"__bases__\tstatement"
			],
			[
				"Va",
				"VanillaGAN\tclass"
			],
			[
				"y_",
				"y_batch\tparam"
			],
			[
				"fix",
				"fixed_noise\tstatement"
			],
			[
				"Z_",
				"Z_batch=\tparam"
			],
			[
				"writer",
				"writer_train\tstatement"
			],
			[
				"fake",
				"fake_predictions\tstatement"
			],
			[
				"in",
				"input_size\tparam"
			],
			[
				"gen",
				"gen_in_dim\tstatement"
			],
			[
				"y",
				"y_dim\tparam"
			],
			[
				"la",
				"label_dim\tstatement"
			],
			[
				"ten",
				"tensor2\tparam"
			],
			[
				"tesn",
				"tensor2\tstatement"
			],
			[
				"tens",
				"tensor2\tstatement"
			],
			[
				"tenso",
				"tensor2\tparam"
			],
			[
				"from",
				"from_numpy\tfunction"
			],
			[
				"fi",
				"fixed_labels\tstatement"
			],
			[
				"fiex",
				"fixed_noise_size\tparam"
			],
			[
				"fixe",
				"fixed_noise_size\tparam"
			],
			[
				"uni",
				"unique\tfunction"
			],
			[
				"Layer",
				"LayerPrintSize\tclass"
			],
			[
				"C",
				"ConditionalVanillaGAN\tmodule"
			],
			[
				"adver",
				"adversariat"
			],
			[
				"f",
				"fixed_noise_size=\tparam"
			],
			[
				"y_t",
				"y_train\tstatement"
			],
			[
				"net",
				"network_structure\tstatement"
			],
			[
				"a",
				"adv_type=\tparam"
			],
			[
				"val",
				"valid_last_layer\tstatement"
			],
			[
				"losses",
				"losses_dict\tstatement"
			],
			[
				"batch",
				"batches_per_epoch\tstatement"
			],
			[
				"losse",
				"_losses"
			],
			[
				"by",
				"by_epoch"
			],
			[
				"Ad",
				"Adversariat"
			],
			[
				"Adver",
				"Adversariat_real"
			],
			[
				"get_",
				"get_hyperparameters\tfunction"
			],
			[
				"bat",
				"batch_size"
			],
			[
				"advers",
				"adversariat_loss_fn"
			],
			[
				"gene",
				"generator_loss_fn"
			],
			[
				"data",
				"dataset\tstatement"
			],
			[
				"ad",
				"add_holidays\tfunction"
			],
			[
				"ts_",
				"ts_series1\tstatement"
			],
			[
				"Date",
				"DatetimeIndex\tclass"
			],
			[
				"is",
				"isinstance\tfunction"
			],
			[
				"raise_",
				"raise_if_not\tfunction"
			],
			[
				"Data",
				"DataFrame\tclass"
			],
			[
				"value",
				"values1\tstatement"
			],
			[
				"values",
				"values1\tstatement"
			],
			[
				"Index",
				"IndexError\tclass"
			],
			[
				"assert",
				"assertRaises"
			],
			[
				"da",
				"data_dict"
			],
			[
				"dummy_",
				"dummy_indexing"
			],
			[
				"retu",
				"return_df\tstatement"
			],
			[
				"raise",
				"raise_if\tfunction"
			],
			[
				"tes",
				"test_df1\tstatement"
			],
			[
				"date",
				"date_range\tfunction"
			],
			[
				"Time",
				"TimeSeries\tclass"
			],
			[
				"Value",
				"ValueError\tclass"
			],
			[
				"D",
				"DataFrame\tclass"
			],
			[
				"data_",
				"data_resampled_ts\tstatement"
			],
			[
				"pre",
				"prev_indices\tstatement"
			],
			[
				"model",
				"model_forecast\tstatement"
			],
			[
				"sarim",
				"sarimax_pred\tstatement"
			],
			[
				"sari",
				"sarimax_pred\tstatement"
			],
			[
				"sar",
				"sarimax_pred\tstatement"
			],
			[
				"fiel",
				"field_row_string\tstatement"
			],
			[
				"inu",
				"input_data\tstatement"
			],
			[
				"it",
				"iterrows\tfunction"
			],
			[
				"met",
				"metric_name\tstatement"
			],
			[
				"sort_",
				"sort_values\tfunction"
			],
			[
				"set_",
				"set_index\tfunction"
			],
			[
				"L",
				"LGBMClassifier\tmodule"
			],
			[
				"XGB",
				"XGBClassifier\tmodule"
			],
			[
				"KN",
				"KNeighborsClassifier\tclass"
			],
			[
				"metri",
				"metrics_row\tstatement"
			],
			[
				"metric",
				"metric_name\tstatement"
			],
			[
				"metr",
				"metric\tstatement"
			],
			[
				"cla",
				"classification_report\tfunction"
			],
			[
				"roc_",
				"roc_auc_score\tfunction"
			],
			[
				"cro",
				"cross_val_score\tfunction"
			],
			[
				"train",
				"train_test_split\tfunction"
			],
			[
				"train_",
				"train_test_split\tfunction"
			],
			[
				"Ne",
				"NearestNeighbors\tclass"
			],
			[
				"Lo",
				"LogisticRegression\tclass"
			],
			[
				"di",
				"diff2\tstatement"
			],
			[
				"peri",
				"periods=\tparam"
			],
			[
				"targ",
				"target_diff2\tstatement"
			],
			[
				"per",
				"periods=\tparam"
			],
			[
				"Val",
				"ValueError\tclass"
			],
			[
				"ser",
				"series1\tstatement"
			],
			[
				"asser",
				"assertEqual\tfunction"
			],
			[
				"my_re",
				"my_req\tstatement"
			],
			[
				"michal",
				"michal_req\tstatement"
			],
			[
				"michal_",
				"michal_reqs\tstatement"
			],
			[
				"my",
				"my_lib\tstatement"
			],
			[
				"micha",
				"michal_req\tstatement"
			],
			[
				"mich",
				"michal_req\tstatement"
			],
			[
				"myre",
				"myreqs\tstatement"
			],
			[
				"read",
				"readlines\tfunction"
			],
			[
				"set",
				"set_index\tfunction"
			]
		]
	},
	"buffers":
	[
		{
			"file": "examples/example_conditional.py",
			"settings":
			{
				"buffer_size": 3787,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "examples/example_image_to_image.py",
			"settings":
			{
				"buffer_size": 5418,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "utils/utils.py",
			"settings":
			{
				"buffer_size": 4657,
				"line_ending": "Unix"
			}
		},
		{
			"file": "utils/networks.py",
			"settings":
			{
				"buffer_size": 4339,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"conda ins",
				"Conda: Install Package"
			],
			[
				"conda",
				"Conda: Activate Environment"
			],
			[
				"markd",
				"Markdown Preview: Preview in Browser"
			],
			[
				"conda isn",
				"Conda: Install Package"
			],
			[
				"mark",
				"Markdown Preview: Preview in Browser"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"revie",
				"TodoReview: Project Files"
			],
			[
				"term",
				"Terminal: Open in project folder"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"todo",
				"TodoReview: Project Files"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"git sta",
				"Git: Status"
			],
			[
				"conda ",
				"Conda: Activate Environment"
			],
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/thomas/Backup/Algorithmen/GAN-pytorch"
	],
	"file_history":
	[
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/gan_pytorch.sublime-project",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/examples/example_input_formats.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/README.md",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/examples/example_conditional.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/unconditional/GenerativeModel.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/conditional/ConditionalGenerativeModel.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/utils/utils.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/examples/example_conditonal.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/utils/plot2DModel.py",
		"/home/thomas/.config/sublime-text-3/Packages/AutoDocstring/Default (Linux).sublime-keymap",
		"/home/thomas/.config/sublime-text-3/Packages/AutoDocstring/AutoDocstring.sublime-settings",
		"/home/thomas/.config/sublime-text-3/Packages/User/AutoDocstring.sublime-settings",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/utils/networks.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/examples/example_unconditional.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/examples/custom_example_conditional.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/examples/sequential_example.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/TrainedModels/ConditionalGAN20210405_111555/summary.txt",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/GAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/unconditional/DualGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/conditional/ConditionalDualGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/TrainedModels/ConditionalGAN20210405_110225/summary.txt",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/TrainedModels/ConditionalGAN20210405_110133/summary.txt",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/conditional/ConditionalWassersteinGANGP.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/conditional/ConditionalWassersteinGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/unconditional/WassersteinGANGP.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/conditional/ConditionalVanillaGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/unconditional/VanillaGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/unconditional/WassersteinGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/ConditionalGenerativeModel.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/ConditionalDualGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/GenerativeModel.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/examples/custom_example.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/DualGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/WassersteinGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/WassersteinGANGP.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/VanillaGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/models/ConditionalVanillaGAN.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/TrainedModels/ConditionalGAN20210404_210500/summary.txt",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/TrainedModels/ConditionalGAN/summary.txt",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/TrainedModels/ConditionalGAN20210404_203833/summary.txt",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/TrainedModels/GAN/summary.txt",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/TrainedModels/ConditionalGAN20210404_203227/summary.txt",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/TrainedModels/ConditionalGAN20210404_202925/summary.txt",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/utils/layers.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/test_gans.py",
		"/home/thomas/miniconda3/envs/pytorch38/lib/python3.8/site-packages/torch/nn/modules/module.py",
		"/home/thomas/Backup/Algorithmen/GAN-pytorch/TrainedModels/GAN20210403_204152/model.json",
		"/Users/tneuer/Documents/Testing/pytorch/pytorch_mnist.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/darts/darts/timeseries.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/darts.sublime-project",
		"/Users/tneuer/Documents/unit8/cx/Darts/darts/darts/utils/timeseries_generation.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/darts/darts/tests/test_timeseries.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/darts/darts/logging.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/darts/darts/models/arima.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/Issues/issue284.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/darts/darts/models/forecasting_model.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/Issues/issue289.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/darts/darts/models/tcn_model.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/Issues/issue289",
		"/Users/tneuer/Downloads/scoring-pipeline/run_example.sh",
		"/Users/tneuer/Downloads/h2oai_experiment_logs_Model_Deployment_HydraulicSystem/h2oai_experiment_summary_c18ff564-e195-11ea-a7d8-0242ac110002/summary.json",
		"/Users/tneuer/Documents/unit8/cx/MLOps/Data/Classification/2fit_models.py",
		"/Users/tneuer/Documents/unit8/cx/MLOps/Data/Classification/1prepare_data.py",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
		"/Users/tneuer/Documents/unit8/cx/Darts/darts/darts/tests/test_local_forecasting_models.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/staged-recipes/recipes/u8darts/issue282.py",
		"/Users/tneuer/Documents/issue282.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/conda-receipe/meta.yaml",
		"/Users/tneuer/Documents/unit8/cx/MLOps/DataRobot/PythonClient/predict.py",
		"/Users/tneuer/Documents/unit8/cx/MLOps/DataRobot/change_data.py",
		"/Users/tneuer/Documents/unit8/cx/MLOps/DataRobot/custom-test.py",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/User/Anaconda.sublime-settings",
		"/Users/tneuer/Documents/unit8/cx/Darts/darts/README.md",
		"/Users/tneuer/Documents/Testing/el_test.py",
		"/Users/tneuer/Documents/Testing/test/test_calculator.py",
		"/Users/tneuer/Documents/Testing/testing.sublime-project",
		"/Users/tneuer/Documents/Testing/test/__init__.py",
		"/Users/tneuer/Documents/Testing/__init__.py",
		"/Users/tneuer/Documents/Testing/src/__init__.py",
		"/Users/tneuer/Documents/Testing/src/calculator.py",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/CodeFormatter/Default (OSX).sublime-keymap",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/TodoReview/Default.sublime-keymap",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/TodoReview/TodoReview.sublime-settings",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/User/TodoReview.sublime-settings",
		"/Users/tneuer/Documents/Testing/.idea/Testing.iml",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/AutoDocstring/AutoDocstring.sublime-settings",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/AutoDocstring/Default (OSX).sublime-keymap",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/Terminal/Default (OSX).sublime-keymap",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/Terminal/Terminal.sublime-settings",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/User/Terminal.sublime-settings",
		"/Users/tneuer/Downloads/predict.py",
		"/Users/tneuer/darts-runs.yml",
		"/Users/tneuer/Documents/unit8/cx/MLOps/DataRobot/cahnge_data.py",
		"/Users/tneuer/Documents/unit8/cx/MyDarts/darts/varma_test.py",
		"/Users/tneuer/Documents/unit8/cx/MyMLOps/DataRobot/test.py",
		"/Users/tneuer/Documents/Test/TimeSeries/test_var.py",
		"/Users/tneuer/Documents/unit8/cx/MyDarts/darts/darts/models/VAR.py",
		"/Users/tneuer/Documents/unit8/cx/MyDarts/darts/darts/models/arima.py",
		"/Users/tneuer/Documents/unit8/cx/MyDarts/darts/darts/timeseries.py",
		"/Users/tneuer/Documents/Test/TimeSeries/test_gaps.py",
		"/Users/tneuer/Documents/unit8/cx/MyDarts/darts/darts/models/test_var.py",
		"/Users/tneuer/Documents/Test/TimeSeries/test_gaps_minimal.py",
		"/Users/tneuer/Documents/Test/TimeSeries/test_arima.py",
		"/Users/tneuer/Documents/Test/Sorting/README.md",
		"/Users/tneuer/Documents/Test/test.py",
		"/Users/tneuer/Documents/unit8/BD/CashFlow/example_analysis.py",
		"/Users/tneuer/Documents/unit8/BD/CashFlow/example_data.csv",
		"/Users/tneuer/Documents/unit8/cx/Darts/test_darts.py",
		"/Users/tneuer/Documents/unit8/cx/Darts/MockData/passengers.csv",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/Anaconda/Anaconda.sublime-settings",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/tneuer/Library/Application Support/Sublime Text 3/Packages/User/Plain text.sublime-settings"
	],
	"find":
	{
		"height": 24.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"__dict__",
			"X_test",
			"test_dataloader",
			"_log_images",
			"sample",
			"))",
			"fixed_",
			"Total",
			"calculate_losses",
			"log",
			"calculate_losses",
			"adversariat",
			"fixed_labels",
			"z_dim",
			"VanillaGAN",
			":",
			"\"",
			"ConditionalGenerativeModel",
			"GenerativeModel",
			"arch",
			")\n",
			"arc",
			"    def save_as_json(self, save=True, name=\"model\"):\n        json_dict = {}\n        for network in self.neural_nets:\n            json_dict.update(network.save_as_json(path=None))\n        if save:\n            with open(self.folder+name+'.json', 'w') as f:\n                json.dump(json_dict, f, indent=4)\n        return json_dict\n\n    @classmethod\n    def load_from_json(cls, path):\n        with open(path, \"r\") as f:\n            json_dict = json.load(f)\n        for _, architecture in json_dict.items():\n            for i, (layer, params) in enumerate(architecture):\n                architecture[i][0] = eval(layer)\n        return cls(\n            generator_architecture=json_dict[\"Generator\"],\n            adversariat_architecture=json_dict[\"Adversariat\"]\n        )",
			"arch",
			")\n",
			"architecture",
			"archi",
			"architecture",
			"mean",
			"self._los",
			"logged_losses",
			"losses",
			"self.losses",
			"{}",
			"self.batch_size",
			"self.log_every",
			"numpy",
			"\n        ",
			"set_",
			"self"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "examples/example_conditional.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3787,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3430,
										3431
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"region.yellowish"
									]
								},
								"open":
								{
									"1":
									[
										3429,
										3430
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "examples/example_image_to_image.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5418,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "utils/utils.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4657,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "utils/networks.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4339,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2186,
										2187
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"region.greenish"
									]
								},
								"open":
								{
									"1":
									[
										2128,
										2129
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 45.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 236.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "build_test",
	"project": "gan_pytorch.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"calc",
				"test/test_calculator.py"
			],
			[
				"",
				"src/calculator.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 390.0,
		"last_filter": "add",
		"selected_items":
		[
			[
				"add",
				"add"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 222.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
